" For vundle
set nocompatible
" 关闭文件类型检测功能
filetype off
" 允许vim加载文件类型插件
filetype plugin on 
" 允许vim为不同类型的文件定义不同的缩进格式
filetype indent on 
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'
" vim-scripts repos
Bundle 'bash-support.vim'
Plugin 'lua-support'
" 插件:airline-state column
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" 插件:solarized配色
Plugin 'altercation/vim-colors-solarized'
" 插件:molokai配色
Plugin 'tomasr/molokai'
" 插件:字体
Plugin 'powerline/fonts'
" 插件:彩虹括号
Plugin 'luochen1990/rainbow'
" 插件:填充缩进
Plugin 'nathanaelkane/vim-indent-guides'
" 插件:虚线缩进
Bundle 'Yggdroot/indentLine'
" 插件:自动补全
Bundle 'Valloric/YouCompleteMe'
" 插件:YouCompleteMe语义补全的服务器
"Bundle 'Valloric/ycmd'
" 插件:lua -- vim-misc
Plugin 'xolox/vim-misc'
" 插件:lua -- xolox/vim-lua-ftplugin
Plugin 'xolox/vim-lua-ftplugin'
" 插件:supertab
Plugin 'ervandew/supertab'
" 插件:ctags
Plugin 'ctags.vim'
" 插件:语法提示
Bundle 'scrooloose/syntastic'
" 插件:winmanager
Plugin 'winmanager' 
" 插件:tagbar depend ctag
Plugin 'Tagbar' 
" 插件:cscope
Plugin 'cscope.vim' 
" 插件:c/h file convert
Plugin 'a.vim'  
" 插件:BufExplorer
Plugin 'bufexplorer.zip'

" Plugin A for converting c/h file Setting ------------------------------------
" c/h file convert touch F12
nnoremap <silent> <F12> :A<cr>

" Tagbar Setting --------------------------------------------------------------
nmap <Leader>tb :TagbarToggle<CR>
" ctags程序的路径
let g:tagbar_ctags_bin='ctags'           
" 窗口宽度的设置
let g:tagbar_width=30                    
" c语言程序,tagbar自动开启
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()

" SuperTab Setting ------------------------------------------------------------
" superTab config that typing <Tab> is <C-X><C-O>
let g:SuperTabRetainCompletionType = 2
let g:SuperTabDefaultCompletionType = "<C-X><C-O>"

" Netrw Setting --------------------------------------------------------------- 
" netrw is default plugin in vim7.0
let g:netrw_winsize = 30

" Tagbar work in with Winmanager Setting -------------------------------------
let g:winManagerWindowLayout = "BufExplorer,FileExplorer|Tagbar"
let g:winManagerWidth = 30
let g:defaultExplorer = 0 
nmap <C-W><C-F> :FirstExplorerWindow<cr> 
nmap <C-W><C-B> :BottomExplorerWindow<cr> 
nmap <silent> wm :WMToggle<cr>
" 配置进入vim时自动打开winmanager
"let g:AutoOpenWinManager = 1

" Vim-airline Setting ---------------------------------------------------------
let g:airline_theme = 'luna'
set guifont=Liberation\ Mono\ for\ Powerline\ 10
" powerline字体补丁配置
let g:airline_powerline_fonts = 1
" airline top-tabline配置
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = "\u2b80"
let g:airline#extensions#tabline#left_alt_sep = "\u2b81"
set laststatus=2

" airline symbols 配置
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = '|'
let g:airline_right_sep = ''
let g:airline_right_alt_sep = '|'
let g:airline_symbols.linenr = '+'
let g:airline_symbols.branch = '|'
let g:airline_symbols.paste = '|'
let g:airline_symbols.whitespace = '|'
" airline symbols
"let g:airline_left_sep = ''
"let g:airline_left_alt_sep = ''
"let g:airline_right_sep = ''
"let g:airline_right_alt_sep = ''
"let g:airline_symbols.branch = ''
"let g:airline_symbols.readonly = ''
"let g:airline_symbols.linenr = ''


" Indent Setting --------------------------------------------------------------
" indent_guides配置(填充缩进)
"let g:indent_guides_enable_on_vim_startup = 1
"let g:indent_guides_auto_colors = 1
"let g:indent_guides_guide_size = 1 
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
" indentLine配置(虚线缩进)
" map <leader>lt :IndentLinesToggle<CR>

" Regular Setting -------------------------------------------------------------
syntax on "覆盖当前语法高亮的更改

" General Setting -------------------------------------------------------------
" 搜索和匹配
set showmatch	        		" 高亮匹配的括号
set matchtime=5 	        	" 匹配括号高亮的时间（单位:0.1senconds）
set hlsearch		        	" 高亮查找
set formatoptions=tcrqn     	" 自动格式化
set autoindent 		        	" 继承缩进方式
"set smartindent 	        	" 智能对齐
set cindent                     " 使用 C/C++ 语言的自动缩进方式
set tabstop=4                   " 设置制表符(tab键)的宽度
set softtabstop=4               " 设置软制表符的宽度    
set shiftwidth=4                " (自动) 缩进使用的4个空格
set nobackup		        	" 关闭备份
set nowritebackup	        	" 关闭写入备份
set noswapfile		        	" 关闭交换文件
set showcmd		            	" 显示输入命令
set showmode                    " 命令行显示vim当前模式
set laststatus=2	         	" 总是显示状态栏
set textwidth=80	         	" 内容宽度
set cc=80		             	" 显示80列的竖线
set clipboard+=unnamed 		    " 共享剪切板

" Theme Setting ---------------------------------------------------------------
" 系统配色
syntax enable
set background=dark
colorscheme solarized
let g:colors_name = 'solarized'
let g:solarized_termcolors = 256
let g:solarized_termtrans = 16
let g:solarized_contrast = 'normal'
let g:solarized_visibility = 'normal'
let g:solarized_underline = 1
let g:solarized_italic = 1

"colorscheme molokai 
"let g:molokai_original=1

" Cursorline Setting ----------------------------------------------------------
" cursorline配色
set cursorline
hi CursorLine cterm=NONE ctermbg=darkblue ctermfg=white guibg=darkred guifg=white

" YouComplete Setting ---------------------------------------------------------
" 配置补全菜单行为
set completeopt=longest,menu                                                                                                                                                                                      
" 离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif   
" 打开诊断信息
nnoremap <silent> <leader>yd :YcmDiags<CR>
" 获取变量类型
nnoremap <silent> <leader>yt :YcmCompleter GetType<CR>
" 跳转定义或声明
nnoremap <silent> <leader>ye :YcmCompleter GoToDefinitionElseDeclaration<CR>
" 跳转声明
nnoremap <silent> <leader>yq :YcmCompleter GoToDeclaration<CR>
" 跳转定义
nnoremap <silent> <leader>yw :YcmCompleter GoToDefinition<CR>
" 跳转包含文件
nnoremap <silent> <leader>yi :YcmCompleter GoToInclude<CR>
" force recompile with syntastic
nnoremap <leader>fc :YcmForceCompileAndDiagnostics<CR>
" open locationlist
nnoremap <leader>lo :lopen<CR>
" close locationlist
nnoremap <leader>lc :lclose<CR>

" 上下左右键的行为触发显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
" 回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"	

let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
"let g:ycm_key_list_select_completion=['<c-n>']
let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion=['<c-p>']
let g:ycm_key_list_previous_completion = ['<Up>']

"let g:ycm_goto_buffer_command = 'horizontal-split'            " 分屏打开
let g:ycm_register_as_syntastic_checker = 1                    " 使用syntastic检测语法
let g:ycm_error_symbol = '✗'                                   " error symbol
let g:ycm_warning_symbol = '⚠'                                 " warning symbol
let g:ycm_collect_identifiers_from_tags_files = 1              " 开启YCM基于标签引擎
let g:ycm_min_num_of_chars_for_completion = 2                  " 从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc = 0                                   " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax = 1                     " 语法关键字补全
let g:ycm_confirm_extra_conf = 0                               " 禁止手动确认导入配置
let g:ycm_complete_in_comments = 0                             " 在注释输入中补全:0关闭,1开启
let g:ycm_complete_in_strings = 0                              " 在字符串输入中补全:0关闭,1开启
let g:ycm_collect_identifiers_from_comments_and_strings = 0    " 注释和字符串中的文字也会被收入补全
let g:ycm_enable_diagnostic_signs = 1                          " 诊断提示符:0关闭,1开启
let g:ycm_enable_diagnostic_highlighting = 1                   " 诊断高亮:0关闭,1开启
let g:ycm_key_invoke_completion = '<C-Tab>'                    " 跨文件补全
let g:ycm_confirm_extra_conf = 1                               " 加载.ycm_extra_conf.py提示:0关闭,1打开
let g:ycm_show_diagnostics_ui = 1                              " 诊断ui:0关闭,1打开

" old version
"if !empty(glob("~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"))
"    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"
"endif

" new version
"if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
"    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
"endif

" Syntastic Setting -----------------------------------------------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0
" 打开文件时 Syntastic 插件自动高亮显示错误
let g:syntastic_check_on_open = 1
" 打开文件时让光标跳转到检测到的第一个问题处
let g:syntastic_auto_jump = 1
" set error signs
let g:syntastic_error_symbol = '✗' 
" set warning signs
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_enable_highlighting = 0

" Attention below config sequence, because we can find stdlib.h in /usr/include , but
" that stdlib.h is not expected by gcc-6, and an fatal error comes.
" So, we need set the cpp's 'include path' in front of the general 'include path'
let g:syntastic_cpp_include_dirs = ['/usr/include/c++/6.3.1',
			\'/usr/include/',
			\'/usr/local/include']
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_auto_refresh_includes = 1
let g:syntastic_cpp_check_header = 1
"let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = '-std=c++11 stdlib=libstdc++ -Wall -Wextra'
" whether to show balloons
let g:syntastic_enable_balloons = 1 

" Rainbow Setting -------------------------------------------------------------
" 彩虹括号配置
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
let g:rainbow_conf = {
\   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
\   'operators': '_,_',
\   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\   'separately': {
\       '*': {},
\       'tex': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\       },
\       'lisp': {
\           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\       },
\       'vim': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\       },
\       'html': {
\           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\       },
\       'css': 0,
\   }
\}

